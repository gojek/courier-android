"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[999],{5680:(e,n,r)=>{r.d(n,{xA:()=>l,yg:()=>v});var t=r(6540);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var o=t.createContext({}),d=function(e){var n=t.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},l=function(e){var n=d(e.components);return t.createElement(o.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=d(r),p=i,v=u["".concat(o,".").concat(p)]||u[p]||g[p]||s;return r?t.createElement(v,a(a({ref:n},l),{},{components:r})):t.createElement(v,a({ref:n},l))}));function v(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=r.length,a=new Array(s);a[0]=p;var c={};for(var o in n)hasOwnProperty.call(n,o)&&(c[o]=n[o]);c.originalType=e,c[u]="string"==typeof e?e:i,a[1]=c;for(var d=2;d<s;d++)a[d]=r[d];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},7938:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>g,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var t=r(8168),i=(r(6540),r(5680));const s={},a="Send & Receive messages",c={unversionedId:"SendReceiveMessage",id:"SendReceiveMessage",title:"Send & Receive messages",description:"Courier library provides the functionality of sending & receiving messages through both service interface and MqttClient.",source:"@site/docs/SendReceiveMessage.md",sourceDirName:".",slug:"/SendReceiveMessage",permalink:"/courier-android/docs/SendReceiveMessage",draft:!1,editUrl:"https://github.com/gojek/courier-android/edit/main/docs/docs/SendReceiveMessage.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Subscribe & Unsubscribe topics",permalink:"/courier-android/docs/SubscribeUnsubscribe"},next:{title:"Message & Stream Adapters",permalink:"/courier-android/docs/MessageStreamAdapters"}},o={},d=[{value:"Send/Receive using Service Interface",id:"sendreceive-using-service-interface",level:2},{value:"Send/Receive using MqttClient",id:"sendreceive-using-mqttclient",level:2}],l={toc:d},u="wrapper";function g(e){let{components:n,...r}=e;return(0,i.yg)(u,(0,t.A)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"send--receive-messages"},"Send & Receive messages"),(0,i.yg)("p",null,"Courier library provides the functionality of sending & receiving messages through both service interface and MqttClient."),(0,i.yg)("h2",{id:"sendreceive-using-service-interface"},"Send/Receive using Service Interface"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},'interface MessageService {\n    @Receive(topic = "topic/{id}/receive")\n    fun receive(@Path("id") identifier: String): Observable<Message>\n    \n    @Send(topic = "topic/{id}/send", qos = QoS.TWO)\n    fun send(@Path("id") identifier: String, @Data message: Message)\n}\n')),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},'messageService.send("user-id", message)\n\nmessageService.receive("user-id") { message ->\n    print(message)\n}\n')),(0,i.yg)("h2",{id:"sendreceive-using-mqttclient"},"Send/Receive using MqttClient"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},"mqttClient.send(message, topic, QoS.TWO)\n\nmqttClient.addMessageListener(topic, object : MessageListener {\n    override fun onMessageReceived(mqttMessage: MqttMessage) {\n        print(mqttMessage)\n    }\n})\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Note")," : Only messages for those topics can be received through receive api, which are already subscribed"))}g.isMDXComponent=!0}}]);