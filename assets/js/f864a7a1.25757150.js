"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[362],{3905:(e,r,t)=>{t.d(r,{Zo:()=>a,kt:()=>f});var n=t(7294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=n.createContext({}),b=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},a=function(e){var r=b(e.components);return n.createElement(u.Provider,{value:r},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,c=e.originalType,u=e.parentName,a=o(e,["components","mdxType","originalType","parentName"]),l=b(t),d=i,f=l["".concat(u,".").concat(d)]||l[d]||p[d]||c;return t?n.createElement(f,s(s({ref:r},a),{},{components:t})):n.createElement(f,s({ref:r},a))}));function f(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var c=t.length,s=new Array(c);s[0]=d;var o={};for(var u in r)hasOwnProperty.call(r,u)&&(o[u]=r[u]);o.originalType=e,o[l]="string"==typeof e?e:i,s[1]=o;for(var b=2;b<c;b++)s[b]=t[b];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5089:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>c,metadata:()=>o,toc:()=>b});var n=t(7462),i=(t(7294),t(3905));const c={},s="Subscribe & Unsubscribe topics",o={unversionedId:"SubscribeUnsubscribe",id:"SubscribeUnsubscribe",title:"Subscribe & Unsubscribe topics",description:"Courier library provides the functionality of subscribing & unsubscribing topics through both service interface and MqttClient.",source:"@site/docs/SubscribeUnsubscribe.md",sourceDirName:".",slug:"/SubscribeUnsubscribe",permalink:"/courier-android/docs/SubscribeUnsubscribe",draft:!1,editUrl:"https://github.com/gojek/courier-android/edit/main/docs/docs/SubscribeUnsubscribe.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Courier Service Interface",permalink:"/courier-android/docs/CourierService"},next:{title:"Send & Receive messages",permalink:"/courier-android/docs/SendReceiveMessage"}},u={},b=[{value:"Subscribe/Unsubscribe through Service Interface",id:"subscribeunsubscribe-through-service-interface",level:2},{value:"Subscribe/Unsubscribe through MqttClient",id:"subscribeunsubscribe-through-mqttclient",level:2}],a={toc:b},l="wrapper";function p(e){let{components:r,...t}=e;return(0,i.kt)(l,(0,n.Z)({},a,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"subscribe--unsubscribe-topics"},"Subscribe & Unsubscribe topics"),(0,i.kt)("p",null,"Courier library provides the functionality of subscribing & unsubscribing topics through both service interface and MqttClient."),(0,i.kt)("h2",{id:"subscribeunsubscribe-through-service-interface"},"Subscribe/Unsubscribe through Service Interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'interface MessageService {\n    @Subscribe(topic = "topic/{id}/receive", qos = QoS.ONE)\n    fun subscribe(@Path("id") identifier: String): Observable<Message>\n    \n    @SubscribeMultiple\n    fun subscribeMultiple(@TopicMap topics: Map<String, QoS>)\n    \n    @Unsubscribe(topics = ["topic/{id}/receive"])\n    fun unsubscribe(@Path("id") identifier: String)\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'messageService.subscribe("user-id").subscribe { message ->\n    print(message)\n}\n\nmessageService.subscribeMultiple(mapOf("topic1" to QoS.ONE, "topic2" to QoS.TWO))\n\nmessageService.unsubscribe("user-id")\n')),(0,i.kt)("h2",{id:"subscribeunsubscribe-through-mqttclient"},"Subscribe/Unsubscribe through MqttClient"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'mqttClient.subscribe("topic1" to QoS.ZERO, "topic2" to QoS.ONE)\n\nmqttClient.unsubscribe("topic1", "topic2")\n')))}p.isMDXComponent=!0}}]);