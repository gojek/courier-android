"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[145],{5680:(e,r,t)=>{t.d(r,{xA:()=>c,yg:()=>g});var a=t(6540);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var p=a.createContext({}),l=function(e){var r=a.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=l(e.components);return a.createElement(p.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},m=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,s=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(t),m=n,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||s;return t?a.createElement(g,o(o({ref:r},c),{},{components:t})):a.createElement(g,o({ref:r},c))}));function g(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var s=t.length,o=new Array(s);o[0]=m;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i[d]="string"==typeof e?e:n,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3313:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=t(8168),n=(t(6540),t(5680));const s={},o="Message & Stream Adapters",i={unversionedId:"MessageStreamAdapters",id:"MessageStreamAdapters",title:"Message & Stream Adapters",description:"Courier provides the functionality of passing your own custom or library-provided message & stream adapters.",source:"@site/docs/MessageStreamAdapters.md",sourceDirName:".",slug:"/MessageStreamAdapters",permalink:"/courier-android/docs/MessageStreamAdapters",draft:!1,editUrl:"https://github.com/gojek/courier-android/edit/main/docs/docs/MessageStreamAdapters.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Send & Receive messages",permalink:"/courier-android/docs/SendReceiveMessage"},next:{title:"Experiment Configs",permalink:"/courier-android/docs/ExperimentConfigs"}},p={},l=[{value:"Message Adapter",id:"message-adapter",level:2},{value:"Stream Adapter",id:"stream-adapter",level:2}],c={toc:l},d="wrapper";function u(e){let{components:r,...t}=e;return(0,n.yg)(d,(0,a.A)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"message--stream-adapters"},"Message & Stream Adapters"),(0,n.yg)("p",null,"Courier provides the functionality of passing your own custom or library-provided message & stream adapters."),(0,n.yg)("h2",{id:"message-adapter"},"Message Adapter"),(0,n.yg)("p",null,"To serialize and deserialize received and published messages, Courier uses MessageAdapter. With this, you don't need to handle the serialization and deserialization process when publishing and receiving messages from broker."),(0,n.yg)("p",null,"Courier library provides the following message adapters:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"courier-message-adapter-gson")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"courier-message-adapter-moshi")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"courier-message-adapter-protobuf"))),(0,n.yg)("p",null,"You can also create your own custom message adapter by implementing the MessageAdapter.Factory interface."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-kotlin"},"class MyCustomMessageAdapterFactory : MessageAdapter.Factory {\n\n    override fun create(type: Type, annotations: Array<Annotation>): MessageAdapter<*> {\n        return MyCustomMessageAdapter()\n    }\n}\n\nprivate class MyCustomMessageAdapter<T> constructor() : MessageAdapter<T> {\n\n    override fun fromMessage(topic: String, message: Message): T {\n        // convert message to custom type\n    }\n\n    override fun toMessage(topic: String, data: T): Message {\n        // convert custom type to message\n    }\n\n    override fun contentType(): String {\n        // content-type supported by this adapter.\n    }\n}\n")),(0,n.yg)("h2",{id:"stream-adapter"},"Stream Adapter"),(0,n.yg)("p",null,"Courier library provides the following stream adapters:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"courier-stream-adapter-rxjava")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"courier-stream-adapter-rxjava2")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"courier-stream-adapter-coroutines"))),(0,n.yg)("p",null,"You can also create your own custom Stream adapter by implementing the StreamAdapter.Factory interface."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-kotlin"},"class MyCustomStreamAdapterFactory : StreamAdapter.Factory {\n\n    override fun create(type: Type): StreamAdapter<Any, Any> {\n        return MyCustomStreamAdapter()\n    }\n}\n\nprivate class MyCustomStreamAdapter<T> : StreamAdapter<T, Any> {\n\n    override fun adapt(stream: Stream<T>): Any {\n        // convert stream to custom stream\n    }\n}\n")))}u.isMDXComponent=!0}}]);