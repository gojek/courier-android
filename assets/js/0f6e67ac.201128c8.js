"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[849],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>v});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),d=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=d(n),g=i,v=u["".concat(o,".").concat(g)]||u[g]||p[g]||s;return n?r.createElement(v,a(a({ref:t},l),{},{components:n})):r.createElement(v,a({ref:t},l))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=g;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[u]="string"==typeof e?e:i,a[1]=c;for(var d=2;d<s;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6626:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var r=n(7462),i=(n(7294),n(3905));const s={},a="Send & Receive messages",c={unversionedId:"SendReceiveMessage",id:"SendReceiveMessage",title:"Send & Receive messages",description:"Courier library provides the functionality of sending & receiving messages through both service interface and MqttClient.",source:"@site/docs/SendReceiveMessage.md",sourceDirName:".",slug:"/SendReceiveMessage",permalink:"/courier-android/docs/SendReceiveMessage",draft:!1,editUrl:"https://github.com/gojek/courier-android/edit/main/docs/docs/SendReceiveMessage.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Subscribe & Unsubscribe topics",permalink:"/courier-android/docs/SubscribeUnsubscribe"},next:{title:"Message & Stream Adapters",permalink:"/courier-android/docs/MessageStreamAdapters"}},o={},d=[{value:"Send/Receive using Service Interface",id:"sendreceive-using-service-interface",level:2},{value:"Send/Receive using MqttClient",id:"sendreceive-using-mqttclient",level:2}],l={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"send--receive-messages"},"Send & Receive messages"),(0,i.kt)("p",null,"Courier library provides the functionality of sending & receiving messages through both service interface and MqttClient."),(0,i.kt)("h2",{id:"sendreceive-using-service-interface"},"Send/Receive using Service Interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'interface MessageService {\n    @Receive(topic = "topic/{id}/receive")\n    fun receive(@Path("id") identifier: String): Observable<Message>\n    \n    @Send(topic = "topic/{id}/send", qos = QoS.TWO)\n    fun send(@Path("id") identifier: String, @Data message: Message)\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'messageService.send("user-id", message)\n\nmessageService.receive("user-id") { message ->\n    print(message)\n}\n')),(0,i.kt)("h2",{id:"sendreceive-using-mqttclient"},"Send/Receive using MqttClient"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"mqttClient.send(message, topic, QoS.TWO)\n\nmqttClient.addMessageListener(topic, object : MessageListener {\n    override fun onMessageReceived(mqttMessage: MqttMessage) {\n        print(mqttMessage)\n    }\n})\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note")," : Only messages for those topics can be received through receive api, which are already subscribed"))}p.isMDXComponent=!0}}]);