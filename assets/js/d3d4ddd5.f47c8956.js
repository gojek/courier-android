"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[209],{5680:(e,n,r)=>{r.d(n,{xA:()=>d,yg:()=>m});var t=r(6540);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=t.createContext({}),g=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},d=function(e){var n=g(e.components);return t.createElement(s.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=g(r),u=i,m=c["".concat(s,".").concat(u)]||c[u]||p[u]||a;return r?t.createElement(m,o(o({ref:n},d),{},{components:r})):t.createElement(m,o({ref:n},d))}));function m(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var g=2;g<a;g++)o[g]=r[g];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4521:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>g});var t=r(8168),i=(r(6540),r(5680));const a={},o="MQTT Ping Sender",l={unversionedId:"PingSender",id:"PingSender",title:"MQTT Ping Sender",description:"When an MQTT connection between a client and the broker is idle for a long time, it may get torn down due to TCP binding timeout. In order to keep the connection alive, the client needs to send PINGREQ packets through the connection. If the connection is alive, the broker responds with a PINGRESP packet. If the client does not receive the PINGRESP packet within some fixed interval, it breaks the connection and reconnects. The interval at which these packets are sent is the Keepalive Interval.",source:"@site/docs/PingSender.md",sourceDirName:".",slug:"/PingSender",permalink:"/courier-android/docs/PingSender",draft:!1,editUrl:"https://github.com/gojek/courier-android/edit/main/docs/docs/PingSender.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Adaptive KeepAlive",permalink:"/courier-android/docs/AdaptiveKeepAlive"},next:{title:"Subscription Store",permalink:"/courier-android/docs/SubscriptionStore"}},s={},g=[{value:"Ping Sender",id:"ping-sender",level:2},{value:"Current Implementations",id:"current-implementations",level:2},{value:"WorkManagerPingSender",id:"workmanagerpingsender",level:3},{value:"Usage",id:"usage",level:3},{value:"WorkManager-2.6.0 PingSender",id:"workmanager-260-pingsender",level:3},{value:"Usage",id:"usage-1",level:3},{value:"AlarmPingSender",id:"alarmpingsender",level:3},{value:"Usage",id:"usage-2",level:3},{value:"TimerPingSender",id:"timerpingsender",level:3},{value:"Usage",id:"usage-3",level:3}],d={toc:g},c="wrapper";function p(e){let{components:n,...r}=e;return(0,i.yg)(c,(0,t.A)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"mqtt-ping-sender"},"MQTT Ping Sender"),(0,i.yg)("p",null,"When an MQTT connection between a client and the broker is idle for a long time, it may get torn down due to TCP binding timeout. In order to keep the connection alive, the client needs to send PINGREQ packets through the connection. If the connection is alive, the broker responds with a PINGRESP packet. If the client does not receive the PINGRESP packet within some fixed interval, it breaks the connection and reconnects. The interval at which these packets are sent is the Keepalive Interval."),(0,i.yg)("h2",{id:"ping-sender"},"Ping Sender"),(0,i.yg)("p",null,"Courier Android library uses Ping Sender for sending pings through the MQTT connection. It encapsulates the actual mechanism used for sending the ping requests."),(0,i.yg)("h2",{id:"current-implementations"},"Current Implementations"),(0,i.yg)("h3",{id:"workmanagerpingsender"},"WorkManagerPingSender"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Uses WorkManager for sending ping requests over the MQTT connection."),(0,i.yg)("li",{parentName:"ul"},"Ideal for cases where the connection needs to be maintained when the app is in background."),(0,i.yg)("li",{parentName:"ul"},"No user permission is required for using this."),(0,i.yg)("li",{parentName:"ul"},"Uses WorkManager version 2.7.0 which requires compileSdkVersion to be 31 or higher.")),(0,i.yg)("h3",{id:"usage"},"Usage"),(0,i.yg)("p",null,"Add this dependency for using WorkManagerPingSender"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    implementation "com.gojek.courier:workmanager-pingsender:x.y.z"\n}\n')),(0,i.yg)("p",null,"Create ping sender using the factory class"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},"pingSender = WorkPingSenderFactory.createMqttPingSender(\n                context, workManagerPingSenderConfig\n            )\n")),(0,i.yg)("h3",{id:"workmanager-260-pingsender"},"WorkManager-2.6.0 PingSender"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Uses WorkManager for sending ping requests over the MQTT connection."),(0,i.yg)("li",{parentName:"ul"},"Ideal for cases where the connection needs to be maintained when the app is in background."),(0,i.yg)("li",{parentName:"ul"},"No user permission is required for using this."),(0,i.yg)("li",{parentName:"ul"},"Uses WorkManager version 2.6.0 which is compatible with apps targeting lower than android 31.")),(0,i.yg)("h3",{id:"usage-1"},"Usage"),(0,i.yg)("p",null,"Add this dependency for using WorkManagerPingSender"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    implementation "com.gojek.courier:workmanager-2.6.0-pingsender:x.y.z"\n}\n')),(0,i.yg)("p",null,"Create ping sender using the factory class"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},"pingSender = WorkPingSenderFactory.createMqttPingSender(\n                context, workManagerPingSenderConfig\n            )\n")),(0,i.yg)("h3",{id:"alarmpingsender"},"AlarmPingSender"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Uses Alarms for sending ping requests over the MQTT connection."),(0,i.yg)("li",{parentName:"ul"},"Ideal for cases where the connection needs to be maintained when the app is in background."),(0,i.yg)("li",{parentName:"ul"},"On Android 12 & above, user permission is required for scheduling exact alarms.")),(0,i.yg)("h3",{id:"usage-2"},"Usage"),(0,i.yg)("p",null,"Add this dependency for using AlarmPingSender"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    implementation "com.gojek.courier:alarm-pingsender:x.y.z"\n}\n')),(0,i.yg)("p",null,"Create ping sender using the factory class"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},"pingSender = AlarmPingSenderFactory.createMqttPingSender(\n                context, alarmPingSenderConfig\n            )\n")),(0,i.yg)("h3",{id:"timerpingsender"},"TimerPingSender"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Uses Timer for sending ping requests over the MQTT connection."),(0,i.yg)("li",{parentName:"ul"},"Ideal for cases where the connection needs to be maintained only when the app is in foreground.")),(0,i.yg)("h3",{id:"usage-3"},"Usage"),(0,i.yg)("p",null,"Add this dependency for using TimerPingSender"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    implementation "com.gojek.courier:timer-pingsender:x.y.z"\n}\n')),(0,i.yg)("p",null,"Create ping sender using the factory class"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},"pingSender = TimerPingSenderFactory.create()\n")))}p.isMDXComponent=!0}}]);