"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[695],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>m});var n=t(7294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=n.createContext({}),u=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},p=function(e){var r=u(e.components);return n.createElement(c.Provider,{value:r},e.children)},l="mdxType",b={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),l=u(t),d=i,m=l["".concat(c,".").concat(d)]||l[d]||b[d]||o;return t?n.createElement(m,s(s({ref:r},p),{},{components:t})):n.createElement(m,s({ref:r},p))}));function m(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=d;var a={};for(var c in r)hasOwnProperty.call(r,c)&&(a[c]=r[c]);a.originalType=e,a[l]="string"==typeof e?e:i,s[1]=a;for(var u=2;u<o;u++)s[u]=t[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9817:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>b,frontMatter:()=>o,metadata:()=>a,toc:()=>u});var n=t(7462),i=(t(7294),t(3905));const o={},s="Subscription Store",a={unversionedId:"SubscriptionStore",id:"SubscriptionStore",title:"Subscription Store",description:"Courier library uses Subscription Store for maintaining the current subscriptions and pending unsubscribe requests.",source:"@site/docs/SubscriptionStore.md",sourceDirName:".",slug:"/SubscriptionStore",permalink:"/courier-android/docs/SubscriptionStore",draft:!1,editUrl:"https://github.com/gojek/courier-android/edit/main/docs/docs/SubscriptionStore.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MQTT Ping Sender",permalink:"/courier-android/docs/PingSender"},next:{title:"MQTT Chuck",permalink:"/courier-android/docs/MqttChuck"}},c={},u=[{value:"PersistableSubscriptionStore",id:"persistablesubscriptionstore",level:2},{value:"InMemorySubscriptionStore",id:"inmemorysubscriptionstore",level:2},{value:"Usage",id:"usage",level:2}],p={toc:u},l="wrapper";function b(e){let{components:r,...t}=e;return(0,i.kt)(l,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"subscription-store"},"Subscription Store"),(0,i.kt)("p",null,"Courier library uses Subscription Store for maintaining the current subscriptions and pending unsubscribe requests."),(0,i.kt)("p",null,"Currently there are two implementations of SubscriptionStore provided by Courier library."),(0,i.kt)("h2",{id:"persistablesubscriptionstore"},"PersistableSubscriptionStore"),(0,i.kt)("p",null,"In this implementation, the current subscriptions are maintained in-memory and pending unsubscribe requests are maintained in shared preferences. When client reconnects, subscription packets are sent again and pending unsubscribe packets are also sent, if present."),(0,i.kt)("h2",{id:"inmemorysubscriptionstore"},"InMemorySubscriptionStore"),(0,i.kt)("p",null,"In this implementation, the current subscriptions are maintained in-memory and no pending unsubscribe requests are maintained. When client reconnects, subscription packets are sent again."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"You can choose the subscription store implementation to be used using ",(0,i.kt)("a",{parentName:"p",href:"ExperimentConfigs"},"ExperimentConfigs")))}b.isMDXComponent=!0}}]);